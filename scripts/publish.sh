#!/bin/sh

default()
{
  SCRIPT=`basename $0`
  SCRIPT_DIR=`dirname $0`
  SCRIPT_DIR=`cd $SCRIPT_DIR; pwd`

  PTNFLY_DIR=$SCRIPT_DIR/..
  TMP_DIR=/tmp/patternfly

  # Ensures only main repo is released
  PTNFLY_REPO_SLUG=dlabrecq/patternfly

  # Tag prefix used to kick off version bump
  TAG_PREFIX=_bump-v
}

# Add tag to angular-patternfly to kick off version bump
#
add_angular_tag()
{
  echo "*** Adding angular tag"
  cd $PTNFLY_DIR

  # Add tag to kick off apf version bump
  git fetch apf master:master-apf # <remote-branch>:<local-branch>
  git checkout master-apf
  git tag $TAG_PREFIX$VERSION
  git push apf $TAG_PREFIX$VERSION
  check $? "add tag failure"
}

# Add release tag to master-dist
#
add_release_tag()
{
  echo "*** Adding release tag"
  cd $PTNFLY_DIR

  # Add release tag
  git tag v$VERSION
  check $? "add tag failure"
}

# Check errors
#
# $1: Exit status
# $2: Error message
check()
{
  if [ "$1" != 0 ]; then
    echo "*** Error: $2"
    exit $1
  fi
}

# Delete tag used to kick off version bump
#
delete_bump_tag()
{
  echo "*** Deleting bump tag"
  cd $PTNFLY_DIR

  # Remove bump tag
  git tag --delete $TAG_PREFIX$VERSION
  git push upstream :refs/tags/$TAG_PREFIX$VERSION
  check $? "delete tag failure"
}

# Publish to npm
#
publish_npm()
{
  echo "*** Publishing npm"
  cd $PTNFLY_DIR

  # Log into npm
  printf "$NPM_USER\n$NPM_PWD\n$NPM_USER@redhat.com" | npm login
  check $? "npm login failure"

  sh -x $SCRIPT_DIR/release.sh -p
  check $? "npm publish failure"
}

# Push generated files to dist branch
#
push_dist()
{
  echo "*** Pushing to $TRAVIS_BRANCH-dist"
  cd $PTNFLY_DIR

  # Commit generated files
  git add dist --force
  git commit -m "Added files generated by Travis build"
  check $? "git commit failure"

  # Push to dist branch
  EXISTING=`git ls-remote --heads https://github.com/$TRAVIS_REPO_SLUG.git $TRAVIS_BRANCH-dist`

  if [ -n "$EXISTING" ]; then
    git fetch upstream $TRAVIS_BRANCH-dist:$TRAVIS_BRANCH-dist # <remote-branch>:<local-branch>
    git checkout $TRAVIS_BRANCH-dist
    git merge -Xtheirs $TRAVIS_BRANCH-local --no-edit --ff
    check $? "git merge failure"

    git push upstream $TRAVIS_BRANCH-dist --force -v
  else
    git push upstream $TRAVIS_BRANCH-local:$TRAVIS_BRANCH-dist --force -v
  fi
  check $? "git push failure"
}

# Push version bump changes to master branch
#
push_master()
{
  echo "*** Pushing to master"
  cd $PTNFLY_DIR

  # Changes should have already been committed by release script for bower install verification
  git add --all
  git commit -m "Bumped version number to $VERSION"

  # Merge master branch
  git fetch upstream master:master # <remote-branch>:<local-branch>
  git checkout master
  git merge -Xtheirs $TRAVIS_BRANCH-local --no-edit --ff
  check $? "git merge failure"

  # Push to master
  git push upstream master:master
  check $? "git push failure"
}

# Push version bump and generated files to master-dist for tagging release
#
push_master_dist()
{
  echo "*** Pushing to master-dist"
  cd $PTNFLY_DIR

  git checkout $TRAVIS_BRANCH-local

  # Commit generated files
  git add dist --force
  git commit -m "Added files generated by Travis build"
  check $? "git commit failure"

  # Push to dist branch
  EXISTING=`git ls-remote --heads https://github.com/$TRAVIS_REPO_SLUG.git master-dist`

  if [ -n "$EXISTING" ]; then
    git fetch upstream master-dist:master-dist # <remote-branch>:<local-branch>
    git checkout master-dist
    git merge -Xtheirs $TRAVIS_BRANCH-local --no-edit --ff
    check $? "git merge failure"

    add_release_tag
    git push upstream master-dist --force -v --tags
  else
    add_release_tag
    git push upstream $TRAVIS_BRANCH-local:master-dist --force -v --tags
  fi
  check $? "git push failure"
}

usage()
{
cat <<- EEOOFF

    This script will publish generated files to GitHub.

    Note: Intended for use with Travis only.

    sh [-x] $SCRIPT [-h]

    Example: sh $SCRIPT

    OPTIONS:
    h       Display this message (default)

EEOOFF
}

# main()
{
  default

  while getopts hbd c; do
    case $c in
      h) usage; exit 0;;
      \?) usage; exit 1;;
    esac
  done

  echo "This build is running against $TRAVIS_REPO_SLUG"

  if [ -n "$TRAVIS_TAG" ]; then
    echo "This build is running against $TRAVIS_TAG"

    # Get version from tag
    case "$TRAVIS_TAG" in
      $TAG_PREFIX* ) VERSION=`echo "$TRAVIS_TAG" | cut -c 8-`;;
      *) echo "$TRAVIS_TAG is not a recognized format. Do not release!"; exit 0;;
    esac
  fi

  # Ensure dist branch is not redeployed.
  case "$TRAVIS_BRANCH" in
    *-dist ) echo "This commit was made against the dist branch. Do not deploy!"; exit 0;;
  esac

  # Ensure release runs with Patternfly tags only
  if [ "$TRAVIS_REPO_SLUG" = "$PTNFLY_REPO_SLUG" -a -n "$VERSION" ]; then
    push_master # Push version bump to master
    push_master_dist # Push version bump and generated files to master-dist for tagging release
    publish_npm # Publish to npm
    add_angular_tag # Kick off apf version bump
    delete_bump_tag # Delete version bump tag
  else
    push_dist # Push normal build to dist branch
  fi
}
